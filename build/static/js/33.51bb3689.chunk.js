(this.webpackJsonpKintsugi=this.webpackJsonpKintsugi||[]).push([[33],{1819:function(e){e.exports=JSON.parse('[{"inputs":[{"internalType":"address[]","name":"tokens","type":"address[]"},{"internalType":"address[][]","name":"spenders","type":"address[][]"},{"internalType":"address","name":"owner","type":"address"}],"name":"getAllowances","outputs":[{"components":[{"internalType":"uint256[]","name":"allowances","type":"uint256[]"}],"internalType":"struct AllowanceInfo[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"tokens","type":"address[]"},{"internalType":"address[][]","name":"spenders","type":"address[][]"},{"internalType":"address","name":"owner","type":"address"}],"name":"getAllowancesFlat","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"boosts","type":"address[]"},{"internalType":"address","name":"owner","type":"address"}],"name":"getBoostOrGovBalance","outputs":[{"components":[{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"rewards","type":"uint256"}],"internalType":"struct BoostBalanceInfo[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"govVaults","type":"address[]"},{"internalType":"address","name":"owner","type":"address"}],"name":"getGovVaultBalance","outputs":[{"components":[{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"rewards","type":"uint256"}],"internalType":"struct GovVaultBalanceInfo[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"tokens","type":"address[]"},{"internalType":"address","name":"owner","type":"address"}],"name":"getTokenBalances","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"}]')},3347:function(e,t,n){"use strict";n.r(t),n.d(t,"AllowanceAPI",(function(){return u}));var s=n(1819),a=n(7),r=n.n(a),o=n(12),d=n(27),i=n(5),c=n(26),p=n(10);const l=s;class u{constructor(e,t){this.web3=e,this.chain=t}async fetchAllAllowances(e,t,n,s,a){const u=new this.web3.eth.Contract(l,this.chain.fetchBalancesAddress),y={},m={},w=(t,n)=>{const s=Object(i.i)(e,this.chain.id,t),a=s.address.toLowerCase();if(!Object(d.a)(s))throw new Error("Can't query allowance of non erc20 token, skipping ".concat(s.id));void 0===y[a]&&(y[a]={tokenAddress:s.address,spenders:new Set}),y[a].spenders.add(n),void 0===m[a]&&(m[a]=s)};for(const r of t)w(r.earnedTokenAddress,r.earnContractAddress),w(r.depositTokenAddress,r.earnContractAddress);for(const r of n)w(r.depositTokenAddress,r.earnContractAddress);for(const r of s){w(Object(p.p)(e,r.vaultId).earnedTokenAddress,r.earnContractAddress)}const f=Object(c.b)(),A=Object.entries(y),h=Object(o.chunk)(A,f),T=h.map((e=>u.methods.getAllowancesFlat(e.map((e=>{let[t,n]=e;return t})),e.map((e=>{let[t,n]=e;return Array.from(n.spenders)})),a).call())),b=await Promise.all([...T]),k=[];let v=0;for(const o of h){const e=b[v];let t=0;for(const n of o.map((e=>e[1])))for(const s of Array.from(n.spenders)){const a=e[t];"0"!==a&&k.push({tokenAddress:n.tokenAddress,spenderAddress:s,allowance:new r.a(a).shiftedBy(-m[n.tokenAddress.toLowerCase()].decimals)}),t++}v++}return k}async fetchTokensAllowance(e,t,n,s){const a=new this.web3.eth.Contract(l,this.chain.fetchBalancesAddress),p={},u={},y=(t,n)=>{const s=Object(i.i)(e,this.chain.id,t),a=s.address.toLowerCase();if(!Object(d.a)(s))throw new Error("Can't query allowance of non erc20 token, skipping ".concat(s.id));void 0===p[a]&&(p[a]={tokenAddress:s.address,spenders:new Set}),p[a].spenders.add(n),void 0===u[a]&&(u[a]=s)};for(const r of t)y(r.address,s);const m=Object(c.b)(),w=Object.entries(p),f=Object(o.chunk)(w,m),A=f.map((e=>a.methods.getAllowancesFlat(e.map((e=>{let[t,n]=e;return t})),e.map((e=>{let[t,n]=e;return Array.from(n.spenders)})),n).call())),h=await Promise.all([...A]),T=[];let b=0;for(const o of f){const e=h[b];let t=0;for(const n of o.map((e=>e[1])))for(const s of Array.from(n.spenders)){const a=e[t];"0"!==a&&T.push({tokenAddress:n.tokenAddress,spenderAddress:s,allowance:new r.a(a).shiftedBy(-u[n.tokenAddress.toLowerCase()].decimals)}),t++}b++}return T}}}}]);
//# sourceMappingURL=33.51bb3689.chunk.js.map