{"version":3,"sources":["features/data/apis/balance/balance.ts"],"names":["BeefyV2AppMulticallUserAbi","_BeefyV2AppMulticallUserAbi","BalanceAPI","constructor","web3","chain","fetchAllBalances","state","tokens","govVaults","boosts","walletAddress","mc","this","eth","Contract","fetchBalancesAddress","CHUNK_SIZE","featureFlag_getBalanceApiChunkSize","nativeTokens","erc20Tokens","token","isTokenErc20","push","isTokenNative","Error","erc20TokensBatches","chunk","govVaultBatches","boostBatches","boostPromises","map","boostBatch","methods","getBoostOrGovBalance","boost","earnContractAddress","call","govVaultPromises","govVaultBatch","vault","erc20TokensPromises","erc20TokenBatch","getTokenBalances","address","nativeTokenPromises","_","getBalance","results","Promise","all","res","resultsIdx","batchRes","boostRes","elemidx","boostFormatter","concat","vaultRes","govVaultFormatter","erc20TokenFormatter","nativeToken","formatted","nativeTokenFormatter","result","rawAmount","BigNumber","tokenAddress","amount","shiftedBy","decimals","govVault","balanceToken","selectGovVaultBalanceTokenEntity","id","rewardsToken","selectGovVaultRewardsTokenEntity","rawBalance","balance","rawRewards","rewards","vaultId","selectBoostBalanceTokenEntity","selectBoostRewardsTokenEntity","boostId"],"mappings":"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","file":"static/js/34.54862bc6.chunk.js","sourcesContent":["import _BeefyV2AppMulticallUserAbi from '../../../../config/abi/BeefyV2AppUserMulticall.json';\nimport { AbiItem } from 'web3-utils';\nimport Web3 from 'web3';\nimport { VaultGov } from '../../entities/vault';\nimport { ChainEntity } from '../../entities/chain';\nimport BigNumber from 'bignumber.js';\nimport { AllValuesAsString } from '../../utils/types-utils';\nimport { BoostEntity } from '../../entities/boost';\nimport { chunk } from 'lodash';\nimport {\n  BoostBalance,\n  FetchAllBalancesResult,\n  GovVaultPoolBalance,\n  IBalanceApi,\n  TokenBalance,\n} from './balance-types';\nimport {\n  isTokenErc20,\n  isTokenNative,\n  TokenEntity,\n  TokenErc20,\n  TokenNative,\n} from '../../entities/token';\nimport { featureFlag_getBalanceApiChunkSize } from '../../utils/feature-flags';\nimport { BeefyState } from '../../../../redux-types';\nimport {\n  selectBoostBalanceTokenEntity,\n  selectBoostRewardsTokenEntity,\n  selectGovVaultBalanceTokenEntity,\n  selectGovVaultRewardsTokenEntity,\n} from '../../selectors/balance';\n\n// fix ts types\nconst BeefyV2AppMulticallUserAbi = _BeefyV2AppMulticallUserAbi as AbiItem | AbiItem[];\n\nexport class BalanceAPI<T extends ChainEntity & { fetchBalancesAddress: string }>\n  implements IBalanceApi\n{\n  constructor(protected web3: Web3, protected chain: T) {}\n\n  public async fetchAllBalances(\n    state: BeefyState,\n    tokens: TokenEntity[],\n    govVaults: VaultGov[],\n    boosts: BoostEntity[],\n    walletAddress: string\n  ): Promise<FetchAllBalancesResult> {\n    const mc = new this.web3.eth.Contract(\n      BeefyV2AppMulticallUserAbi,\n      this.chain.fetchBalancesAddress\n    );\n\n    // if we send too much in a single call, we get \"execution reversed\"\n    const CHUNK_SIZE = featureFlag_getBalanceApiChunkSize();\n\n    const nativeTokens: TokenNative[] = [];\n    const erc20Tokens: TokenErc20[] = [];\n    for (const token of tokens) {\n      if (isTokenErc20(token)) {\n        erc20Tokens.push(token);\n      } else if (isTokenNative(token)) {\n        nativeTokens.push(token);\n      } else {\n        throw new Error(`Token type unsupported`);\n      }\n    }\n    const erc20TokensBatches = chunk(erc20Tokens, CHUNK_SIZE);\n    const govVaultBatches = chunk(govVaults, CHUNK_SIZE);\n    const boostBatches = chunk(boosts, CHUNK_SIZE);\n\n    const boostPromises = boostBatches.map(boostBatch =>\n      mc.methods\n        .getBoostOrGovBalance(\n          boostBatch.map(boost => boost.earnContractAddress),\n          walletAddress\n        )\n        .call()\n    );\n    const govVaultPromises = govVaultBatches.map(govVaultBatch => {\n      return mc.methods\n        .getBoostOrGovBalance(\n          govVaultBatch.map(vault => vault.earnContractAddress),\n          walletAddress\n        )\n        .call();\n    });\n    const erc20TokensPromises = erc20TokensBatches.map(erc20TokenBatch =>\n      mc.methods\n        .getTokenBalances(\n          erc20TokenBatch.map(token => token.address),\n          walletAddress\n        )\n        .call()\n    );\n    const nativeTokenPromises = nativeTokens.map(_ => this.web3.eth.getBalance(walletAddress));\n\n    const results = await Promise.all([\n      ...boostPromises,\n      ...govVaultPromises,\n      ...erc20TokensPromises,\n      ...nativeTokenPromises,\n    ]);\n\n    // now reasign results\n\n    const res: FetchAllBalancesResult = {\n      tokens: [],\n      govVaults: [],\n      boosts: [],\n    };\n\n    let resultsIdx = 0;\n    for (const boostBatch of boostBatches) {\n      const batchRes = results[resultsIdx].map((boostRes, elemidx) =>\n        this.boostFormatter(state, boostRes, boostBatch[elemidx])\n      );\n      res.boosts = res.boosts.concat(batchRes);\n      resultsIdx++;\n    }\n    for (const govVaultBatch of govVaultBatches) {\n      const batchRes = results[resultsIdx].map((vaultRes, elemidx) =>\n        this.govVaultFormatter(state, vaultRes, govVaultBatch[elemidx])\n      );\n      res.govVaults = res.govVaults.concat(batchRes);\n      resultsIdx++;\n    }\n    for (const erc20TokenBatch of erc20TokensBatches) {\n      const batchRes = results[resultsIdx].map((vaultRes, elemidx) =>\n        this.erc20TokenFormatter(vaultRes, erc20TokenBatch[elemidx])\n      );\n      res.tokens = res.tokens.concat(batchRes);\n      resultsIdx++;\n    }\n\n    for (const nativeToken of nativeTokens) {\n      const formatted = this.nativeTokenFormatter(results[resultsIdx], nativeToken);\n      res.tokens.push(formatted);\n      resultsIdx++;\n    }\n\n    return res;\n  }\n\n  protected erc20TokenFormatter(result: string, token: TokenEntity): null | TokenBalance {\n    const rawAmount = new BigNumber(result);\n    return {\n      tokenAddress: token.address,\n      amount: rawAmount.shiftedBy(-token.decimals),\n    };\n  }\n\n  protected nativeTokenFormatter(result: string, token: TokenNative): TokenBalance | null {\n    const rawAmount = new BigNumber(result);\n    return {\n      tokenAddress: token.address,\n      amount: rawAmount.shiftedBy(-token.decimals),\n    };\n  }\n\n  protected govVaultFormatter(\n    state: BeefyState,\n    result: AllValuesAsString<GovVaultPoolBalance>,\n    govVault: VaultGov\n  ): GovVaultPoolBalance | null {\n    const balanceToken = selectGovVaultBalanceTokenEntity(state, govVault.id);\n    const rewardsToken = selectGovVaultRewardsTokenEntity(state, govVault.id);\n    const rawBalance = new BigNumber(result.balance);\n    const rawRewards = new BigNumber(result.rewards);\n    return {\n      vaultId: govVault.id,\n      balance: rawBalance.shiftedBy(-balanceToken.decimals),\n      rewards: rawRewards.shiftedBy(-rewardsToken.decimals),\n    };\n  }\n\n  protected boostFormatter(\n    state: BeefyState,\n    result: AllValuesAsString<BoostBalance>,\n    boost: BoostEntity\n  ): BoostBalance | null {\n    const balanceToken = selectBoostBalanceTokenEntity(state, boost.id);\n    const rewardsToken = selectBoostRewardsTokenEntity(state, boost.id);\n    const rawBalance = new BigNumber(result.balance);\n    const rawRewards = new BigNumber(result.rewards);\n    return {\n      boostId: boost.id,\n      balance: rawBalance.shiftedBy(-balanceToken.decimals),\n      rewards: rawRewards.shiftedBy(-rewardsToken.decimals),\n    };\n  }\n}\n"],"sourceRoot":""}