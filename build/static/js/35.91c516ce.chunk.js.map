{"version":3,"sources":["features/data/apis/contract-data/contract-data.ts"],"names":["BeefyV2AppMulticallAbi","_BeefyV2AppMulticallAbi","ContractDataAPI","constructor","web3","chain","fetchAllContractData","state","standardVaults","govVaults","boosts","mc","this","eth","Contract","fetchContractDataAddress","CHUNK_SIZE","featureFlag_getContractDataApiChunkSize","boostBatches","chunk","govVaultBatches","vaultBatches","boostPromises","map","boostBatch","methods","getBoostInfo","boost","earnContractAddress","call","vaultPromises","vaultBatch","getVaultInfo","vault","govVaultPromises","govVaultBatch","getGovVaultInfo","results","Promise","all","res","resultsIdx","batchRes","boostRes","elemidx","boostFormatter","concat","vaultRes","standardVaultFormatter","govVaultFormatter","result","standardVault","selectVaultById","id","mooToken","selectTokenByAddress","chainId","depositToken","depositTokenAddress","balance","BigNumber","shiftedBy","decimals","pricePerFullShare","strategy","govVault","token","totalSupply","earnedToken","earnedTokenAddress","vaultId","rewardRate","periodFinish","Date","parseInt"],"mappings":"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","file":"static/js/35.91c516ce.chunk.js","sourcesContent":["import _BeefyV2AppMulticallAbi from '../../../../config/abi/BeefyV2AppMulticall.json';\nimport { AbiItem } from 'web3-utils';\nimport Web3 from 'web3';\nimport { VaultGov, VaultStandard } from '../../entities/vault';\nimport { ChainEntity } from '../../entities/chain';\nimport BigNumber from 'bignumber.js';\nimport { AllValuesAsString } from '../../utils/types-utils';\nimport { BoostEntity } from '../../entities/boost';\nimport { chunk } from 'lodash';\nimport {\n  BoostContractData,\n  FetchAllContractDataResult,\n  GovVaultContractData,\n  IContractDataApi,\n  StandardVaultContractData,\n} from './contract-data-types';\nimport { featureFlag_getContractDataApiChunkSize } from '../../utils/feature-flags';\nimport { BeefyState } from '../../../../redux-types';\nimport { selectVaultById } from '../../selectors/vaults';\nimport { selectTokenByAddress } from '../../selectors/tokens';\n\n// fix ts types\nconst BeefyV2AppMulticallAbi = _BeefyV2AppMulticallAbi as AbiItem | AbiItem[];\n\nexport class ContractDataAPI<T extends ChainEntity & { fetchContractDataAddress: string }>\n  implements IContractDataApi\n{\n  constructor(protected web3: Web3, protected chain: T) {}\n\n  public async fetchAllContractData(\n    state: BeefyState,\n    standardVaults: VaultStandard[],\n    govVaults: VaultGov[],\n    boosts: BoostEntity[]\n  ): Promise<FetchAllContractDataResult> {\n    const mc = new this.web3.eth.Contract(\n      BeefyV2AppMulticallAbi,\n      this.chain.fetchContractDataAddress\n    );\n\n    // if we send too much in a single call, we get \"execution reversed\"\n    const CHUNK_SIZE = featureFlag_getContractDataApiChunkSize();\n\n    const boostBatches = chunk(boosts, CHUNK_SIZE);\n    const govVaultBatches = chunk(govVaults, CHUNK_SIZE);\n    const vaultBatches = chunk(standardVaults, CHUNK_SIZE);\n\n    const boostPromises = boostBatches.map(boostBatch =>\n      mc.methods.getBoostInfo(boostBatch.map(boost => boost.earnContractAddress)).call()\n    );\n    const vaultPromises = vaultBatches.map(vaultBatch =>\n      mc.methods.getVaultInfo(vaultBatch.map(vault => vault.earnContractAddress)).call()\n    );\n    const govVaultPromises = govVaultBatches.map(govVaultBatch => {\n      return mc.methods\n        .getGovVaultInfo(govVaultBatch.map(vault => vault.earnContractAddress))\n        .call();\n    });\n\n    const results = await Promise.all([...boostPromises, ...vaultPromises, ...govVaultPromises]);\n\n    // now reasign results\n\n    const res: FetchAllContractDataResult = {\n      boosts: [],\n      govVaults: [],\n      standardVaults: [],\n    };\n\n    let resultsIdx = 0;\n    for (const boostBatch of boostBatches) {\n      const batchRes = results[resultsIdx].map((boostRes, elemidx) =>\n        this.boostFormatter(state, boostRes, boostBatch[elemidx])\n      );\n      res.boosts = res.boosts.concat(batchRes);\n      resultsIdx++;\n    }\n    for (const vaultBatch of vaultBatches) {\n      const batchRes = results[resultsIdx].map((vaultRes, elemidx) =>\n        this.standardVaultFormatter(state, vaultRes, vaultBatch[elemidx])\n      );\n      res.standardVaults = res.standardVaults.concat(batchRes);\n      resultsIdx++;\n    }\n    for (const vaultBatch of govVaultBatches) {\n      const batchRes = results[resultsIdx].map((vaultRes, elemidx) =>\n        this.govVaultFormatter(state, vaultRes, vaultBatch[elemidx])\n      );\n      res.govVaults = res.govVaults.concat(batchRes);\n      resultsIdx++;\n    }\n\n    return res;\n  }\n\n  protected standardVaultFormatter(\n    state: BeefyState,\n    result: AllValuesAsString<StandardVaultContractData>,\n    standardVault: VaultStandard\n  ) {\n    const vault = selectVaultById(state, standardVault.id);\n    const mooToken = selectTokenByAddress(state, vault.chainId, vault.earnContractAddress);\n    const depositToken = selectTokenByAddress(state, vault.chainId, vault.depositTokenAddress);\n    return {\n      id: standardVault.id,\n      balance: new BigNumber(result.balance).shiftedBy(-depositToken.decimals),\n      /** always 18 decimals for PPFS */\n      pricePerFullShare: new BigNumber(result.pricePerFullShare).shiftedBy(-mooToken.decimals),\n      strategy: result.strategy,\n    } as StandardVaultContractData;\n  }\n\n  protected govVaultFormatter(\n    state: BeefyState,\n    result: AllValuesAsString<GovVaultContractData>,\n    govVault: VaultGov\n  ) {\n    const vault = selectVaultById(state, govVault.id);\n    const token = selectTokenByAddress(state, vault.chainId, vault.depositTokenAddress);\n    return {\n      id: govVault.id,\n      totalSupply: new BigNumber(result.totalSupply).shiftedBy(-token.decimals),\n    } as GovVaultContractData;\n  }\n\n  protected boostFormatter(\n    state: BeefyState,\n\n    result: AllValuesAsString<BoostContractData>,\n    boost: BoostEntity\n  ) {\n    const earnedToken = selectTokenByAddress(state, boost.chainId, boost.earnedTokenAddress);\n    const vault = selectVaultById(state, boost.vaultId);\n    const depositToken = selectTokenByAddress(state, vault.chainId, vault.depositTokenAddress);\n    return {\n      id: boost.id,\n      totalSupply: new BigNumber(result.totalSupply).shiftedBy(-depositToken.decimals),\n      rewardRate: new BigNumber(result.rewardRate).shiftedBy(-earnedToken.decimals),\n      /* assuming period finish is a UTC timestamp in seconds */\n      periodFinish:\n        result.periodFinish === '0' ? null : new Date(parseInt(result.periodFinish) * 1000),\n    } as BoostContractData;\n  }\n}\n"],"sourceRoot":""}