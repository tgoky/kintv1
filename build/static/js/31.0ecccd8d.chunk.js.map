{"version":3,"sources":["images/bifi-logos/header-logo-notext.svg","features/data/apis/wallet/wallet-connection.ts"],"names":["WalletConnectionApi","constructor","options","onboard","onboardWalletInitializers","this","getOnboardWalletInitializers","createOnboardWalletInitializers","createInjectedWallets","custom","label","injectedNamespace","InjectedNameSpace","Ethereum","checkProviderIdentity","_ref","provider","getIcon","async","default","getInterface","window","ethereum","platforms","_ref2","_ref3","_ref4","_ref5","_ref6","createWalletConnectModule","createCoinbaseWalletModule","createCloverWalletModule","chains","_ref7","CloverConnector","connector","supportedChainIds","map","chain","hexToNumber","id","activate","createCDCWalletModule","_ref8","DeFiConnector","cronosChainId","cronosChainIdHex","numberToHex","cronosChain","find","name","supprtedChainTypes","eth","rpc","rpcUrl","pollingInterval","cosmos","patchedProvider","createEIP1193Provider","eth_requestAccounts","baseRequest","_ref9","method","eth_chainId","_ref10","value","isHexStrict","concat","parseInt","toString","originalOn","on","bind","event","listener","createOnboard","Onboard","wallets","appMetadata","icon","require","logo","description","gettingStartedGuide","networkChainId","token","walletSettings","nativeCurrency","symbol","sample","blockExplorerUrl","explorerUrl","accountCenter","desktop","containerElement","enabled","mobile","subscribeToOnboardEvents","state","select","subscribe","length","onWalletDisconnected","wallet","accounts","setLastConnectedWallet","account","maybeHexToNumber","onChainChanged","address","onUnsupportedChainSelected","_window","_window$localStorage","_window2","_window2$localStorage","localStorage","setItem","removeItem","getLastConnectedWallet","_window3","_window3$localStorage","getItem","getOnboard","tryToAutoReconnect","isConnected","console","log","lastSelectedWallet","walletInits","actions","setWalletModules","lastSelectedWalletExists","undefined","get","walletModules","module","connect","autoSelect","disableModals","err","connectWallet","error","Error","getConnectedWeb3Instance","web3","Web3","extend","methods","call","outputFormatter","_getWeb3FromProvider","askUserToConnectIfNeeded","askUserForChainChange","chainId","setChain","disconnect","disconnectWallet"],"mappings":"wGAAA,OAAe,cAA0B,8C,oCCAzC,uKAcO,MAAMA,EAIXC,YAAsBC,GAAmC,KAAnCA,UAAgC,KAH5CC,aAAO,OACPC,+BAAyB,EAGjCC,KAAKF,QAAU,KACfE,KAAKD,0BAA4B,IACnC,CAEQE,+BAIN,OAHuC,OAAnCD,KAAKD,4BACPC,KAAKD,0BAA4BJ,EAAoBO,mCAEhDF,KAAKD,yBACd,CAMA,sCAAeG,GA4Db,MAAO,CA3DiBC,YAAsB,CAC5CC,OAAQ,CACN,CACEC,MAAO,OACPC,kBAAmBC,IAAkBC,SACrCC,sBAAuBC,IAAA,IAAC,SAAEC,GAAUD,EAAA,QAAOC,KAAcA,EAAsB,WAAC,EAChFC,QAASC,gBAAmB,iCAAsDC,QAClFC,aAAcF,UAAA,CAAeF,SAAWK,OAAeC,WACvDC,UAAW,CAAC,QAEd,CACEb,MAAO,UACPC,kBAAmBC,IAAkBC,SACrCC,sBAAuBU,IAAA,IAAC,SAAER,GAAUQ,EAAA,QAAOR,KAAcA,EAAoB,SAAC,EAC9EC,QAASC,gBACA,iCAAyDC,QAClEC,aAAcF,UAAA,CAAeF,SAAWK,OAAeC,WACvDC,UAAW,CAAC,QAEd,CACEb,MAAO,gBACPC,kBAAmBC,IAAkBC,SACrCC,sBAAuBW,IAAA,IAAC,SAAET,GAAUS,EAAA,QAEhCT,KAAcA,EAAgC,qBAAC,EACnDC,QAASC,gBAAmB,gCAAiDC,QAC7EC,aAAcF,UAAA,CAAeF,SAAWK,OAAeC,WACvDC,UAAW,CAAC,QAEd,CACEb,MAAO,eACPC,kBAAmBC,IAAkBC,SACrCC,sBAAuBY,IAAA,IAAC,SAAEV,GAAUU,EAAA,QAEhCV,KAAcA,EAAkB,WAAO,UAAWK,OAAO,EAC7DJ,QAASC,gBAAmB,gCAAiDC,QAC7EC,aAAcF,UAAA,CAAeF,SAAWK,OAAeC,WACvDC,UAAW,CAAC,QAEd,CACEb,MAAO,OACPC,kBAAmBC,IAAkBC,SACrCC,sBAAuBa,IAAA,IAAC,SAAEX,GAAUW,EAAA,QAAOX,KAAcA,EAAuB,YAAC,EACjFC,QAASC,gBAAmB,iCAAsDC,QAClFC,aAAcF,UAAA,CAAeF,SAAWK,OAAeC,WACvDC,UAAW,CAAC,QAEd,CACEb,MAAO,UACPC,kBAAmBC,IAAkBC,SACrCC,sBAAuBc,IAAA,IAAC,SAAEZ,GAAUY,EAAA,QAAOZ,KAAcA,EAAoB,SAAC,EAC9EC,QAASC,gBACA,kCAAyDC,QAClEC,aAAcF,UAAA,CAAeF,SAAWK,OAAeC,WACvDC,UAAW,CAAC,WAOhBM,cACAC,cAIJ,CAEA,+BAAeC,GACb,MAAO,MACLrB,MAAO,SACPO,QAASC,gBAAmB,kCAAiDC,QAC7EC,aAAcF,UAAuB,IAAhB,OAAEc,GAAQC,EAC7B,MAAM,gBAAEC,SAA0B,gCAE5BC,EAAY,IAAID,EAAgB,CACpCE,kBAAmBJ,EAAOK,KAAIC,GAASC,sBAAYD,EAAME,SAGrD,SAAExB,SAAmBmB,EAAUM,WACrC,MAAO,CACLzB,SAAUA,EACX,GAGP,CAEA,4BAAe0B,GACb,MAAO,MACLhC,MAAO,cACPO,QAASC,gBAAmB,gCAAiDC,QAC7EC,aAAcF,UAAuB,IAAhB,OAAEc,GAAQW,EAC7B,MAAM,cAAEC,SAAwB,+DAC1BC,EAAgB,GAChBC,EAAmBC,sBADH,IAEhBC,EAAchB,EAAOiB,MAAKX,GAASA,EAAME,KAAOM,IAEhDX,EAAY,IAAIS,EAAc,CAClCM,KAAM,SACNC,mBAAoB,CAAC,OACrBC,IAAK,CACHhB,kBAAmB,CARD,IASlBiB,IAAK,CACH,CAACR,GAAgBG,EAAYM,QAE/BC,gBAAiB,MAEnBC,OAAQ,QAGJ,SAAExC,SAAmBmB,EAAUM,WAG/BgB,EAAkBC,gCAAsB1C,EAAU,CACtD2C,oBAAqBzC,UAA4B,IAArB,YAAE0C,GAAaC,EACzC,aAAaD,EAAY,CAAEE,OAAQ,gBAAiB,EAEtDC,YAAa7C,UAA4B,IAArB,YAAE0C,GAAaI,EACjC,MAAMC,QAAcL,EAAY,CAAEE,OAAQ,gBAC1C,OAAOI,sBAAYD,GAASA,EAAK,KAAAE,OAAQC,SAASH,EAAQ,GAAI,IAAII,SAAS,IAAK,IAK9EC,EAAab,EAAgBc,GAAGC,KAAKf,GAkB3C,OAjBAA,EAAgBc,GAAK,CAACE,EAAOC,KAE3BJ,EAAWG,GAAOR,IAOhBS,EALc,iBAAVD,GACOP,sBAAYD,GAIdA,EAJ4B,KAAAE,OAAQC,SAASH,EAAQ,GAAI,IAAII,SAAS,KAIhE,IAIVZ,GAIF,CACLzC,SAAUyC,EACX,GAGP,CAMQkB,gBACN,MAAMxE,EAAUyE,YAAQ,CACtBC,QAASxE,KAAKC,+BACdwE,YAAa,CACX5B,KAAM,kBACN6B,KAAMC,EAAQ,MAAwD7D,QACtE8D,KAAMD,EAAQ,KAAiD7D,QAC/D+D,YACE,4MACFC,oBAAqB,+BAEvBnD,OAAQ3B,KAAKH,QAAQ8B,OAAOK,KAAIC,IAAK,CACnCE,GAAIO,sBAAYT,EAAM8C,gBACtBC,MAAO/C,EAAMgD,eAAeC,eAAeC,OAC3C9E,MAAO4B,EAAMY,KACbI,OAAQmC,iBAAOnD,EAAMe,KACrBqC,iBAAkBpD,EAAMqD,YACxBZ,KAAMC,OAAQ,KAADb,OAAgC7B,EAAME,GAAE,SAAQrB,YAE/DyE,cAAe,CACbC,QAAS,CACPC,iBAAkB,OAClBC,SAAS,GAEXC,OAAQ,CACNF,iBAAkB,OAClBC,SAAS,MAOf,OAFA1F,KAAK4F,yBAAyB9F,GAEvBA,CACT,CAOQ8F,yBAAyB9F,GAE/B,OADgBA,EAAQ+F,MAAMC,OAAO,WACtBC,WAAUvB,IACvB,GAAuB,IAAnBA,EAAQwB,OACVhG,KAAKH,QAAQoG,2BACR,CACL,MAAMC,EAAS1B,EAAQ,GAEvB,GAA+B,IAA3B0B,EAAOC,SAASH,QAAyC,IAAzBE,EAAOvE,OAAOqE,OAChDhG,KAAKH,QAAQoG,2BACR,CAELtG,EAAoByG,uBAAuBF,EAAO7F,OAGlD,MAAMgG,EAAUH,EAAOC,SAAS,GAC1BpB,EAAiBuB,YAAiBJ,EAAOvE,OAAO,GAAGQ,IACnDF,EAAQW,eAAK5C,KAAKH,QAAQ8B,QAAQM,GAASA,EAAM8C,iBAAmBA,IAEtE9C,EACFjC,KAAKH,QAAQ0G,eAAetE,EAAME,GAAIkE,EAAQG,SAE9CxG,KAAKH,QAAQ4G,2BAA2B1B,EAAgBsB,EAAQG,QAEpE,CACF,IAEJ,CAEA,6BAAeJ,CAAuBF,GACpC,IACe,IAADQ,EAAAC,EAELC,EAAAC,EAFP,GAAIX,EACI,QAANQ,EAAA1F,cAAM,IAAA0F,GAAc,QAAdC,EAAND,EAAQI,oBAAY,IAAAH,GAApBA,EAAsBI,QAAQ,sBAAuBb,QAE/C,QAANU,EAAA5F,cAAM,IAAA4F,GAAc,QAAdC,EAAND,EAAQE,oBAAY,IAAAD,GAApBA,EAAsBG,WAAW,sBAErC,CAAE,MACA,CAEJ,CAEA,6BAAeC,GACb,IAAK,IAADC,EAAAC,EACF,OAAa,QAAbD,EAAOlG,cAAM,IAAAkG,GAAc,QAAdC,EAAND,EAAQJ,oBAAY,IAAAK,OAAd,EAANA,EAAsBC,QAAQ,sBACvC,CAAE,MACA,OAAO,IACT,CACF,CAMQC,aAKN,OAJqB,OAAjBrH,KAAKF,UACPE,KAAKF,QAAUE,KAAKsE,iBAGftE,KAAKF,OACd,CAKA,wBAAawH,GAEX,GAAItH,KAAKuH,cAEP,YADAC,QAAQC,IAAI,yCAKd,MAAMC,EAAqB/H,EAAoBsH,yBAC/C,IAAKS,EAEH,YADAF,QAAQC,IAAI,6CAKd,MAAM3H,EAAUE,KAAKqH,aAGfM,EAAc3H,KAAKC,+BACzBH,EAAQ+F,MAAM+B,QAAQC,iBAAiBF,GAGvC,MAAMG,OAEJC,IADAjI,EAAQ+F,MAAMmC,MAAMC,cAAcrF,MAAKsF,GAAUA,EAAO7H,QAAUqH,IAEpE,GAAKI,EAML,UACQnI,EAAoBwI,QAAQrI,EAAS,CACzCsI,WAAY,CAAE/H,MAAOqH,EAAoBW,eAAe,IAE5D,CAAE,MAAOC,GAKP,MAFA3I,EAAoByG,uBAAuB,MAErCkC,CACR,MAfEd,QAAQC,IAAI,iDAAkDC,EAgBlE,CAEA,oBAAqBS,CAAQrI,EAAqBD,GAChD,MAAM2E,QAAgB1E,EAAQyI,cAAc1I,GAE5C,IAAK2E,EAAQwB,OAEX,MADAwB,QAAQgB,MAAM,gCACR,IAAIC,MAAM,uBAGlB,MAAMvC,EAAS1B,EAAQ,GACvB,IAAK0B,EAAOC,SAASH,OAEnB,MADAwB,QAAQgB,MAAM,iCACR,IAAIC,MAAM,wBAGlB,IAAKvC,EAAOvF,SAEV,MADA6G,QAAQgB,MAAM,mCACR,IAAIC,MAAM,yBAEpB,CAKA,8BAAaC,GACX,IAAK1I,KAAKuH,cACR,MAAM,IAAIkB,MAAM,yBAIlB,OAkGJ,SAA8B9H,GAC5B,MAAMgI,EAAO,IAAIC,IAAKjI,GActB,OAVAgI,EAAK5F,IAAI8F,OAAO,CACdC,QAAS,CACP,CACEjG,KAAM,aACNkG,KAAM,cACNC,gBAAiB1C,QAKhBqC,CACT,CAlHWM,CADQjJ,KAAKF,QAAQ+F,MAAMmC,MAAMxD,QAAQ,GACb7D,SACrC,CAKA,8BAAauI,GACX,GAAIlJ,KAAKuH,cAEP,MADAC,QAAQC,IAAI,+CACN,IAAIgB,MAAM,qBAIlB,MAAM3I,EAAUE,KAAKqH,aAGfK,EAAqB/H,EAAoBsH,yBACzCa,EACmB,OAAvBJ,QAEEK,IADFjI,EAAQ+F,MAAMmC,MAAMC,cAAcrF,MAAKsF,GAAUA,EAAO7H,QAAUqH,IAIpE,UACQ/H,EAAoBwI,QACxBrI,EACAgI,EACI,CAAEM,WAAY,CAAE/H,MAAOqH,EAAoBW,eAAe,SAC1DN,EAER,CAAE,MAAOO,GAKP,MAFA3I,EAAoByG,uBAAuB,MAErCkC,CACR,CACF,CAKOf,cACL,IAAKvH,KAAKF,QACR,OAAO,EAGT,MAAM,QAAE0E,GAAYxE,KAAKF,QAAQ+F,MAAMmC,MACvC,OACExD,EAAQwB,OAAS,GACjBxB,EAAQ,GAAG2B,SAASH,OAAS,GAC7BxB,EAAQ,GAAG7C,OAAOqE,OAAS,KACzBxB,EAAQ,GAAG7D,QAEjB,CAMA,2BAAawI,CAAsBC,GACjC,MAAMnH,EAAQW,eAAK5C,KAAKH,QAAQ8B,QAAQM,GAASA,EAAME,KAAOiH,IAC9D,IAAKnH,EAEH,MADAuF,QAAQgB,MAAM,oDAAD1E,OAAqDsF,IAC5D,IAAIX,MAAM,6BAAD3E,OAA8BsF,IAI/C,IAAKpJ,KAAKuH,cAER,MADAC,QAAQgB,MAAM,wCACR,IAAIC,MAAM,oDAKlB,UADsBzI,KAAKF,QAAQuJ,SAAS,CAAED,QAAS1G,sBAAYT,EAAM8C,kBAGvE,MADAyC,QAAQgB,MAAM,iDACR,IAAIC,MAAM,yBAEpB,CAEA,gBAAaa,GAEX,GAAItJ,KAAKF,QAAS,CAChB,MAAM,QAAE0E,GAAYxE,KAAKF,QAAQ+F,MAAMmC,MACnCxD,EAAQwB,cACJhG,KAAKF,QAAQyJ,iBAAiB,CAAElJ,MAAOmE,EAAQ,GAAGnE,OAE5D,CAGAV,EAAoByG,uBAAuB,MAG3CpG,KAAKH,QAAQoG,sBACf,E","file":"static/js/31.0ecccd8d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/header-logo-notext.80a4441f.svg\";","import Web3 from 'web3';\nimport { ChainEntity } from '../../entities/chain';\nimport { find, sample } from 'lodash';\nimport { IWalletConnectionApi, WalletConnectionOptions } from './wallet-connection-types';\nimport { maybeHexToNumber } from '../../../../helpers/format';\nimport { hexToNumber, isHexStrict, numberToHex } from 'web3-utils';\nimport Onboard, { OnboardAPI } from '@web3-onboard/core';\nimport createInjectedWallets from '@web3-onboard/injected-wallets';\nimport createCoinbaseWalletModule from '@web3-onboard/coinbase';\nimport createWalletConnectModule from '@web3-onboard/walletconnect';\nimport { InjectedNameSpace } from '@web3-onboard/injected-wallets/dist/types';\nimport { ConnectOptions } from '@web3-onboard/core/dist/types';\nimport { createEIP1193Provider, WalletInit } from '@web3-onboard/common';\n\nexport class WalletConnectionApi implements IWalletConnectionApi {\n  protected onboard: OnboardAPI | null;\n  protected onboardWalletInitializers: WalletInit[] | null;\n\n  constructor(protected options: WalletConnectionOptions) {\n    this.onboard = null;\n    this.onboardWalletInitializers = null;\n  }\n\n  private getOnboardWalletInitializers(): WalletInit[] {\n    if (this.onboardWalletInitializers === null) {\n      this.onboardWalletInitializers = WalletConnectionApi.createOnboardWalletInitializers();\n    }\n    return this.onboardWalletInitializers;\n  }\n\n  /**\n   * Create list of wallet modules for Onboard\n   * @private\n   */\n  private static createOnboardWalletInitializers() {\n    const injectedWallets = createInjectedWallets({\n      custom: [\n        {\n          label: 'Core',\n          injectedNamespace: InjectedNameSpace.Ethereum,\n          checkProviderIdentity: ({ provider }) => !!provider && !!provider['isAvalanche'],\n          getIcon: async () => (await import(`../../../../images/wallets/core-wallet.svg`)).default,\n          getInterface: async () => ({ provider: (window as any).ethereum }),\n          platforms: ['all'],\n        },\n        {\n          label: 'SafePal',\n          injectedNamespace: InjectedNameSpace.Ethereum,\n          checkProviderIdentity: ({ provider }) => !!provider && !!provider['isSafePal'],\n          getIcon: async () =>\n            (await import(`../../../../images/wallets/safepal-wallet.svg`)).default,\n          getInterface: async () => ({ provider: (window as any).ethereum }),\n          platforms: ['all'],\n        },\n        {\n          label: 'CDC Extension',\n          injectedNamespace: InjectedNameSpace.Ethereum,\n          checkProviderIdentity: ({ provider }) =>\n            // Injected from Browser Extension\n            !!provider && !!provider['isDeficonnectProvider'],\n          getIcon: async () => (await import(`../../../../images/wallets/crypto.png`)).default,\n          getInterface: async () => ({ provider: (window as any).ethereum }),\n          platforms: ['all'],\n        },\n        {\n          label: 'CDC DeFi App',\n          injectedNamespace: InjectedNameSpace.Ethereum,\n          checkProviderIdentity: ({ provider }) =>\n            // Injected from App: DeFi app is fork of trust wallet\n            !!provider && !!provider['isTrust'] && !('trust' in window),\n          getIcon: async () => (await import(`../../../../images/wallets/crypto.png`)).default,\n          getInterface: async () => ({ provider: (window as any).ethereum }),\n          platforms: ['all'],\n        },\n        {\n          label: 'Math',\n          injectedNamespace: InjectedNameSpace.Ethereum,\n          checkProviderIdentity: ({ provider }) => !!provider && !!provider['isMathWallet'],\n          getIcon: async () => (await import(`../../../../images/wallets/math-wallet.svg`)).default,\n          getInterface: async () => ({ provider: (window as any).ethereum }),\n          platforms: ['all'],\n        },\n        {\n          label: 'BitKeep',\n          injectedNamespace: InjectedNameSpace.Ethereum,\n          checkProviderIdentity: ({ provider }) => !!provider && !!provider['isBitKeep'],\n          getIcon: async () =>\n            (await import(`../../../../images/wallets/bitkeep-wallet.png`)).default,\n          getInterface: async () => ({ provider: (window as any).ethereum }),\n          platforms: ['all'],\n        },\n      ],\n    });\n\n    return [\n      injectedWallets,\n      createWalletConnectModule(),\n      createCoinbaseWalletModule(),\n      // WalletConnectionApi.createCDCWalletModule(),\n      // WalletConnectionApi.createCloverWalletModule(),\n    ];\n  }\n\n  private static createCloverWalletModule(): WalletInit {\n    return () => ({\n      label: 'Clover',\n      getIcon: async () => (await import(`../../../../images/wallets/clover.png`)).default,\n      getInterface: async ({ chains }) => {\n        const { CloverConnector } = await import('@clover-network/clover-connector');\n\n        const connector = new CloverConnector({\n          supportedChainIds: chains.map(chain => hexToNumber(chain.id)),\n        });\n\n        const { provider } = await connector.activate();\n        return {\n          provider: provider,\n        };\n      },\n    });\n  }\n\n  private static createCDCWalletModule(): WalletInit {\n    return () => ({\n      label: 'CDC Connect',\n      getIcon: async () => (await import(`../../../../images/wallets/crypto.png`)).default,\n      getInterface: async ({ chains }) => {\n        const { DeFiConnector } = await import('deficonnect');\n        const cronosChainId = 25;\n        const cronosChainIdHex = numberToHex(cronosChainId);\n        const cronosChain = chains.find(chain => chain.id === cronosChainIdHex);\n\n        const connector = new DeFiConnector({\n          name: 'Cronos',\n          supprtedChainTypes: ['eth'],\n          eth: {\n            supportedChainIds: [cronosChainId],\n            rpc: {\n              [cronosChainId]: cronosChain.rpcUrl,\n            },\n            pollingInterval: 15000,\n          },\n          cosmos: null,\n        });\n\n        const { provider } = await connector.activate();\n\n        // Patch missing/non-conforming methods\n        const patchedProvider = createEIP1193Provider(provider, {\n          eth_requestAccounts: async ({ baseRequest }) => {\n            return await baseRequest({ method: 'eth_accounts' });\n          },\n          eth_chainId: async ({ baseRequest }) => {\n            const value = await baseRequest({ method: 'eth_chainId' });\n            return isHexStrict(value) ? value : `0x${parseInt(value + '', 10).toString(16)}`;\n          },\n        });\n\n        // Patch non-conforming events\n        const originalOn = patchedProvider.on.bind(patchedProvider);\n        patchedProvider.on = (event, listener) => {\n          // call original handler with modified value\n          originalOn(event, value => {\n            // chainId: Dec->Hex\n            if (event === 'chainChanged') {\n              listener(isHexStrict(value) ? value : `0x${parseInt(value + '', 10).toString(16)}`);\n              return;\n            }\n            // rest\n            listener(value);\n          });\n\n          // return this\n          return patchedProvider;\n        };\n\n        // DeFiConnectorProvider type is missing EventEmitter type\n        return {\n          provider: patchedProvider,\n        };\n      },\n    });\n  }\n\n  /**\n   * Create instance of Onboard\n   * @private\n   */\n  private createOnboard() {\n    const onboard = Onboard({\n      wallets: this.getOnboardWalletInitializers(),\n      appMetadata: {\n        name: 'Kitsugi Finance',\n        icon: require(`../../../../images/bifi-logos/header-logo-notext.svg`).default,\n        logo: require(`../../../../images/bifi-logos/header-logo.svg`).default,\n        description:\n          'Kintsugi is a Decentralized Yield Optimizer on Arbitrum that allows its users to earn compound interest on their crypto holdings. Kintsugi earns you the highest APYs with safety and efficiency in mind.',\n        gettingStartedGuide: 'https://docs.beefy.finance/',\n      },\n      chains: this.options.chains.map(chain => ({\n        id: numberToHex(chain.networkChainId),\n        token: chain.walletSettings.nativeCurrency.symbol,\n        label: chain.name,\n        rpcUrl: sample(chain.rpc),\n        blockExplorerUrl: chain.explorerUrl,\n        icon: require(`../../../../images/networks/${chain.id}.svg`).default,\n      })),\n      accountCenter: {\n        desktop: {\n          containerElement: 'body',\n          enabled: false,\n        },\n        mobile: {\n          containerElement: 'body',\n          enabled: false,\n        },\n      },\n    });\n\n    this.subscribeToOnboardEvents(onboard);\n\n    return onboard;\n  }\n\n  /**\n   * Subscribe to events so we can notify app on chain/account change + disconnect\n   * @param onboard\n   * @private\n   */\n  private subscribeToOnboardEvents(onboard: OnboardAPI) {\n    const wallets = onboard.state.select('wallets');\n    return wallets.subscribe(wallets => {\n      if (wallets.length === 0) {\n        this.options.onWalletDisconnected();\n      } else {\n        const wallet = wallets[0];\n\n        if (wallet.accounts.length === 0 || wallet.chains.length === 0) {\n          this.options.onWalletDisconnected();\n        } else {\n          // Save last connected wallet\n          WalletConnectionApi.setLastConnectedWallet(wallet.label);\n\n          // Raise events\n          const account = wallet.accounts[0];\n          const networkChainId = maybeHexToNumber(wallet.chains[0].id);\n          const chain = find(this.options.chains, chain => chain.networkChainId === networkChainId);\n\n          if (chain) {\n            this.options.onChainChanged(chain.id, account.address);\n          } else {\n            this.options.onUnsupportedChainSelected(networkChainId, account.address);\n          }\n        }\n      }\n    });\n  }\n\n  private static setLastConnectedWallet(wallet: string | null) {\n    try {\n      if (wallet) {\n        window?.localStorage?.setItem('lastConnectedWallet', wallet);\n      } else {\n        window?.localStorage?.removeItem('lastConnectedWallet');\n      }\n    } catch {\n      // silently ignore\n    }\n  }\n\n  private static getLastConnectedWallet(): string | null {\n    try {\n      return window?.localStorage?.getItem('lastConnectedWallet');\n    } catch {\n      return null;\n    }\n  }\n\n  /**\n   * Lazy-init onboard instance\n   * @private\n   */\n  private getOnboard() {\n    if (this.onboard === null) {\n      this.onboard = this.createOnboard();\n    }\n\n    return this.onboard;\n  }\n\n  /**\n   * Attempt to reconnect to cached provider\n   */\n  public async tryToAutoReconnect() {\n    // Skip if already connected\n    if (this.isConnected()) {\n      console.log('tryToAutoReconnect: Already connected');\n      return;\n    }\n\n    // Must have last selected wallet set\n    const lastSelectedWallet = WalletConnectionApi.getLastConnectedWallet();\n    if (!lastSelectedWallet) {\n      console.log('tryToAutoReconnect: No lastSelectedWallet');\n      return;\n    }\n\n    // Initialize onboard if needed\n    const onboard = this.getOnboard();\n\n    // Init wallets now; rather than in onboard.connect()\n    const walletInits = this.getOnboardWalletInitializers();\n    onboard.state.actions.setWalletModules(walletInits);\n\n    // Last selected wallet must be valid\n    const lastSelectedWalletExists =\n      onboard.state.get().walletModules.find(module => module.label === lastSelectedWallet) !==\n      undefined;\n    if (!lastSelectedWalletExists) {\n      console.log('tryToAutoReconnect: Invalid lastSelectedWallet', lastSelectedWallet);\n      return;\n    }\n\n    // Attempt to connect\n    try {\n      await WalletConnectionApi.connect(onboard, {\n        autoSelect: { label: lastSelectedWallet, disableModals: true },\n      });\n    } catch (err) {\n      // We clear last connected wallet here so that attempting to reconnect opens the modal\n      // rather than trying to reconnect to previous wallet that just failed/was rejected.\n      WalletConnectionApi.setLastConnectedWallet(null);\n      // Rethrow so called knows connection failed\n      throw err;\n    }\n  }\n\n  private static async connect(onboard: OnboardAPI, options?: ConnectOptions) {\n    const wallets = await onboard.connectWallet(options);\n\n    if (!wallets.length) {\n      console.error('connect: No wallet connected');\n      throw new Error('No wallet connected');\n    }\n\n    const wallet = wallets[0];\n    if (!wallet.accounts.length) {\n      console.error('connect: No account connected');\n      throw new Error('No account connected');\n    }\n\n    if (!wallet.provider) {\n      console.error('connect: No provider for wallet');\n      throw new Error('No provider for wallet');\n    }\n  }\n\n  /**\n   * Provider the web3 instance for signed TXs\n   */\n  public async getConnectedWeb3Instance(): Promise<Web3> {\n    if (!this.isConnected()) {\n      throw new Error(`Wallet not connected.`);\n    }\n\n    const wallet = this.onboard.state.get().wallets[0];\n    return _getWeb3FromProvider(wallet.provider);\n  }\n\n  /**\n   * Ask the user to connect if he isn't already\n   */\n  public async askUserToConnectIfNeeded(isAutoConnect: boolean = false) {\n    if (this.isConnected()) {\n      console.log('askUserToConnectIfNeeded: Already connected');\n      throw new Error('Already connected');\n    }\n\n    // initialize onboard if needed\n    const onboard = this.getOnboard();\n\n    // Get last wallet used and make sure it is still supported\n    const lastSelectedWallet = WalletConnectionApi.getLastConnectedWallet();\n    const lastSelectedWalletExists =\n      lastSelectedWallet !== null &&\n      onboard.state.get().walletModules.find(module => module.label === lastSelectedWallet) !==\n        undefined;\n\n    // Connect\n    try {\n      await WalletConnectionApi.connect(\n        onboard,\n        lastSelectedWalletExists\n          ? { autoSelect: { label: lastSelectedWallet, disableModals: false } }\n          : undefined\n      );\n    } catch (err) {\n      // We clear last connected wallet here so that attempting to reconnect opens the modal\n      // rather than trying to reconnect to previous wallet that just failed/was rejected.\n      WalletConnectionApi.setLastConnectedWallet(null);\n      // Rethrow so called knows connection failed\n      throw err;\n    }\n  }\n\n  /**\n   * Whether wallet is currently connected + address available\n   */\n  public isConnected(): boolean {\n    if (!this.onboard) {\n      return false;\n    }\n\n    const { wallets } = this.onboard.state.get();\n    return (\n      wallets.length > 0 &&\n      wallets[0].accounts.length > 0 &&\n      wallets[0].chains.length > 0 &&\n      !!wallets[0].provider\n    );\n  }\n\n  /**\n   * Attempt to allow user to manually switch networks\n   * @param chainId\n   */\n  public async askUserForChainChange(chainId: ChainEntity['id']) {\n    const chain = find(this.options.chains, chain => chain.id === chainId);\n    if (!chain) {\n      console.error(`askUserForChainChange: Couldn't find chain by id ${chainId}`);\n      throw new Error(`Couldn't find chain by id ${chainId}`);\n    }\n\n    // Onboard must already be connected\n    if (!this.isConnected()) {\n      console.error('askUserForChainChange: Not connected');\n      throw new Error(`Wallet must be connected before switching chains`);\n    }\n\n    // Change chain\n    const success = await this.onboard.setChain({ chainId: numberToHex(chain.networkChainId) });\n    if (!success) {\n      console.error('askUserForChainChange: Failed to switch chain');\n      throw new Error(`Failed to switch chain`);\n    }\n  }\n\n  public async disconnect() {\n    // Disconnect Wallet\n    if (this.onboard) {\n      const { wallets } = this.onboard.state.get();\n      if (wallets.length) {\n        await this.onboard.disconnectWallet({ label: wallets[0].label });\n      }\n    }\n\n    // Clear last wallet\n    WalletConnectionApi.setLastConnectedWallet(null);\n\n    // Raise events\n    this.options.onWalletDisconnected();\n  }\n}\n\nfunction _getWeb3FromProvider(provider) {\n  const web3 = new Web3(provider);\n\n  // Override web3.eth.getChainId to accept number strings \"25\" as well as hex strings \"0x17\"\n  // eth_chainId returns \"25\" via Chronos Wallet Extension\n  web3.eth.extend({\n    methods: [\n      {\n        name: 'getChainId',\n        call: 'eth_chainId',\n        outputFormatter: maybeHexToNumber as any,\n      },\n    ],\n  });\n\n  return web3;\n}\n"],"sourceRoot":""}