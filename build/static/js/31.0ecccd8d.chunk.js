(this.webpackJsonpKintsugi=this.webpackJsonpKintsugi||[]).push([[31],{1812:function(e,t,n){"use strict";n.r(t),t.default=n.p+"static/media/header-logo-notext.80a4441f.svg"},3268:function(e,t,n){"use strict";n.r(t),n.d(t,"WalletConnectionApi",(function(){return p}));var a=n(2701),o=n.n(a),i=n(12),r=n(44),l=n(207),c=n(2703),s=n(3226),d=n(2706),h=n(3230),u=n(1470),b=n(1426);class p{constructor(e){this.options=e,this.onboard=void 0,this.onboardWalletInitializers=void 0,this.onboard=null,this.onboardWalletInitializers=null}getOnboardWalletInitializers(){return null===this.onboardWalletInitializers&&(this.onboardWalletInitializers=p.createOnboardWalletInitializers()),this.onboardWalletInitializers}static createOnboardWalletInitializers(){return[Object(s.a)({custom:[{label:"Core",injectedNamespace:u.a.Ethereum,checkProviderIdentity:e=>{let{provider:t}=e;return!!t&&!!t.isAvalanche},getIcon:async()=>(await n.e(40).then(n.bind(null,1816))).default,getInterface:async()=>({provider:window.ethereum}),platforms:["all"]},{label:"SafePal",injectedNamespace:u.a.Ethereum,checkProviderIdentity:e=>{let{provider:t}=e;return!!t&&!!t.isSafePal},getIcon:async()=>(await n.e(42).then(n.bind(null,1818))).default,getInterface:async()=>({provider:window.ethereum}),platforms:["all"]},{label:"CDC Extension",injectedNamespace:u.a.Ethereum,checkProviderIdentity:e=>{let{provider:t}=e;return!!t&&!!t.isDeficonnectProvider},getIcon:async()=>(await n.e(6).then(n.bind(null,1544))).default,getInterface:async()=>({provider:window.ethereum}),platforms:["all"]},{label:"CDC DeFi App",injectedNamespace:u.a.Ethereum,checkProviderIdentity:e=>{let{provider:t}=e;return!!t&&!!t.isTrust&&!("trust"in window)},getIcon:async()=>(await n.e(6).then(n.bind(null,1544))).default,getInterface:async()=>({provider:window.ethereum}),platforms:["all"]},{label:"Math",injectedNamespace:u.a.Ethereum,checkProviderIdentity:e=>{let{provider:t}=e;return!!t&&!!t.isMathWallet},getIcon:async()=>(await n.e(41).then(n.bind(null,1817))).default,getInterface:async()=>({provider:window.ethereum}),platforms:["all"]},{label:"BitKeep",injectedNamespace:u.a.Ethereum,checkProviderIdentity:e=>{let{provider:t}=e;return!!t&&!!t.isBitKeep},getIcon:async()=>(await n.e(128).then(n.bind(null,1814))).default,getInterface:async()=>({provider:window.ethereum}),platforms:["all"]}]}),Object(h.a)(),Object(d.a)()]}static createCloverWalletModule(){return()=>({label:"Clover",getIcon:async()=>(await n.e(129).then(n.bind(null,1815))).default,getInterface:async e=>{let{chains:t}=e;const{CloverConnector:a}=await n.e(36).then(n.bind(null,2707)),o=new a({supportedChainIds:t.map((e=>Object(l.hexToNumber)(e.id)))}),{provider:i}=await o.activate();return{provider:i}}})}static createCDCWalletModule(){return()=>({label:"CDC Connect",getIcon:async()=>(await n.e(6).then(n.bind(null,1544))).default,getInterface:async e=>{let{chains:t}=e;const{DeFiConnector:a}=await Promise.all([n.e(10),n.e(16),n.e(24)]).then(n.bind(null,2708)),o=25,i=Object(l.numberToHex)(25),r=t.find((e=>e.id===i)),c=new a({name:"Cronos",supprtedChainTypes:["eth"],eth:{supportedChainIds:[25],rpc:{[o]:r.rpcUrl},pollingInterval:15e3},cosmos:null}),{provider:s}=await c.activate(),d=Object(b.createEIP1193Provider)(s,{eth_requestAccounts:async e=>{let{baseRequest:t}=e;return await t({method:"eth_accounts"})},eth_chainId:async e=>{let{baseRequest:t}=e;const n=await t({method:"eth_chainId"});return Object(l.isHexStrict)(n)?n:"0x".concat(parseInt(n+"",10).toString(16))}}),h=d.on.bind(d);return d.on=(e,t)=>(h(e,(n=>{t("chainChanged"!==e||Object(l.isHexStrict)(n)?n:"0x".concat(parseInt(n+"",10).toString(16)))})),d),{provider:d}}})}createOnboard(){const e=Object(c.a)({wallets:this.getOnboardWalletInitializers(),appMetadata:{name:"Kitsugi Finance",icon:n(1812).default,logo:n(239).default,description:"Kintsugi is a Decentralized Yield Optimizer on Arbitrum that allows its users to earn compound interest on their crypto holdings. Kintsugi earns you the highest APYs with safety and efficiency in mind.",gettingStartedGuide:"https://docs.beefy.finance/"},chains:this.options.chains.map((e=>({id:Object(l.numberToHex)(e.networkChainId),token:e.walletSettings.nativeCurrency.symbol,label:e.name,rpcUrl:Object(i.sample)(e.rpc),blockExplorerUrl:e.explorerUrl,icon:n(373)("./".concat(e.id,".svg")).default}))),accountCenter:{desktop:{containerElement:"body",enabled:!1},mobile:{containerElement:"body",enabled:!1}}});return this.subscribeToOnboardEvents(e),e}subscribeToOnboardEvents(e){return e.state.select("wallets").subscribe((e=>{if(0===e.length)this.options.onWalletDisconnected();else{const t=e[0];if(0===t.accounts.length||0===t.chains.length)this.options.onWalletDisconnected();else{p.setLastConnectedWallet(t.label);const e=t.accounts[0],n=Object(r.m)(t.chains[0].id),a=Object(i.find)(this.options.chains,(e=>e.networkChainId===n));a?this.options.onChainChanged(a.id,e.address):this.options.onUnsupportedChainSelected(n,e.address)}}}))}static setLastConnectedWallet(e){try{var t,n,a,o;if(e)null===(t=window)||void 0===t||null===(n=t.localStorage)||void 0===n||n.setItem("lastConnectedWallet",e);else null===(a=window)||void 0===a||null===(o=a.localStorage)||void 0===o||o.removeItem("lastConnectedWallet")}catch{}}static getLastConnectedWallet(){try{var e,t;return null===(e=window)||void 0===e||null===(t=e.localStorage)||void 0===t?void 0:t.getItem("lastConnectedWallet")}catch{return null}}getOnboard(){return null===this.onboard&&(this.onboard=this.createOnboard()),this.onboard}async tryToAutoReconnect(){if(this.isConnected())return void console.log("tryToAutoReconnect: Already connected");const e=p.getLastConnectedWallet();if(!e)return void console.log("tryToAutoReconnect: No lastSelectedWallet");const t=this.getOnboard(),n=this.getOnboardWalletInitializers();t.state.actions.setWalletModules(n);const a=void 0!==t.state.get().walletModules.find((t=>t.label===e));if(a)try{await p.connect(t,{autoSelect:{label:e,disableModals:!0}})}catch(o){throw p.setLastConnectedWallet(null),o}else console.log("tryToAutoReconnect: Invalid lastSelectedWallet",e)}static async connect(e,t){const n=await e.connectWallet(t);if(!n.length)throw console.error("connect: No wallet connected"),new Error("No wallet connected");const a=n[0];if(!a.accounts.length)throw console.error("connect: No account connected"),new Error("No account connected");if(!a.provider)throw console.error("connect: No provider for wallet"),new Error("No provider for wallet")}async getConnectedWeb3Instance(){if(!this.isConnected())throw new Error("Wallet not connected.");return function(e){const t=new o.a(e);return t.eth.extend({methods:[{name:"getChainId",call:"eth_chainId",outputFormatter:r.m}]}),t}(this.onboard.state.get().wallets[0].provider)}async askUserToConnectIfNeeded(){if(this.isConnected())throw console.log("askUserToConnectIfNeeded: Already connected"),new Error("Already connected");const e=this.getOnboard(),t=p.getLastConnectedWallet(),n=null!==t&&void 0!==e.state.get().walletModules.find((e=>e.label===t));try{await p.connect(e,n?{autoSelect:{label:t,disableModals:!1}}:void 0)}catch(a){throw p.setLastConnectedWallet(null),a}}isConnected(){if(!this.onboard)return!1;const{wallets:e}=this.onboard.state.get();return e.length>0&&e[0].accounts.length>0&&e[0].chains.length>0&&!!e[0].provider}async askUserForChainChange(e){const t=Object(i.find)(this.options.chains,(t=>t.id===e));if(!t)throw console.error("askUserForChainChange: Couldn't find chain by id ".concat(e)),new Error("Couldn't find chain by id ".concat(e));if(!this.isConnected())throw console.error("askUserForChainChange: Not connected"),new Error("Wallet must be connected before switching chains");if(!await this.onboard.setChain({chainId:Object(l.numberToHex)(t.networkChainId)}))throw console.error("askUserForChainChange: Failed to switch chain"),new Error("Failed to switch chain")}async disconnect(){if(this.onboard){const{wallets:e}=this.onboard.state.get();e.length&&await this.onboard.disconnectWallet({label:e[0].label})}p.setLastConnectedWallet(null),this.options.onWalletDisconnected()}}}}]);
//# sourceMappingURL=31.0ecccd8d.chunk.js.map